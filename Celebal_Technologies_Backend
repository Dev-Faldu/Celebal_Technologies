{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "toc_visible": true,
      "authorship_tag": "ABX9TyNBAI7Q2kDvmSSCk7KRFl/k",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "ec7253f4aa39413985d389f0cc2f4321": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6a067b0099ec4e1bb99ebabaefa1afc9",
              "IPY_MODEL_147a31dd55664656933449b9fa806bdc",
              "IPY_MODEL_67e9a60f1d97459ba0eec3678885f085"
            ],
            "layout": "IPY_MODEL_510743be282144a8bf469db4d1001839"
          }
        },
        "6a067b0099ec4e1bb99ebabaefa1afc9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5228135c1e2b446b983ebfea1ccd2a6d",
            "placeholder": "​",
            "style": "IPY_MODEL_abed0249f5ce4d6da90b971297c4b00c",
            "value": "config.json: 100%"
          }
        },
        "147a31dd55664656933449b9fa806bdc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_398b31a9b7e64b0caef1092d93c8e82f",
            "max": 1401,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_5b24b2ef45f84281af12f57f783e559e",
            "value": 1401
          }
        },
        "67e9a60f1d97459ba0eec3678885f085": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f903c6cc91c2402b9bab2f33f9aef603",
            "placeholder": "​",
            "style": "IPY_MODEL_db508a7ee21e4bb4afe9d7162e14d3a0",
            "value": " 1.40k/1.40k [00:00&lt;00:00, 79.4kB/s]"
          }
        },
        "510743be282144a8bf469db4d1001839": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5228135c1e2b446b983ebfea1ccd2a6d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "abed0249f5ce4d6da90b971297c4b00c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "398b31a9b7e64b0caef1092d93c8e82f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5b24b2ef45f84281af12f57f783e559e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f903c6cc91c2402b9bab2f33f9aef603": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "db508a7ee21e4bb4afe9d7162e14d3a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8b0ab80905234375acabd24133437bf0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c8d122919be4469282766ae2153da91e",
              "IPY_MODEL_f9ed8b1cca9f4808b7b079ba4fe7c358",
              "IPY_MODEL_171ec7ae7de84fceb3920c589b592013"
            ],
            "layout": "IPY_MODEL_57ded1d3c73f44a7b22c5d42d6d73fd9"
          }
        },
        "c8d122919be4469282766ae2153da91e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c67787474de34f33820144c5ccddd0d0",
            "placeholder": "​",
            "style": "IPY_MODEL_4d0b35ad05f849c3a8fcc9be907009fd",
            "value": "model.safetensors: 100%"
          }
        },
        "f9ed8b1cca9f4808b7b079ba4fe7c358": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3a1ccfd5be544d8e9e10d990fde41619",
            "max": 307867048,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ca6f4d4332534699bd21979042a41ad9",
            "value": 307867048
          }
        },
        "171ec7ae7de84fceb3920c589b592013": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7d95579fe2ab43d487e3bafc4bf6f6ea",
            "placeholder": "​",
            "style": "IPY_MODEL_0b91485d45fa45fc83751000fac248ab",
            "value": " 308M/308M [00:04&lt;00:00, 90.3MB/s]"
          }
        },
        "57ded1d3c73f44a7b22c5d42d6d73fd9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c67787474de34f33820144c5ccddd0d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4d0b35ad05f849c3a8fcc9be907009fd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3a1ccfd5be544d8e9e10d990fde41619": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ca6f4d4332534699bd21979042a41ad9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7d95579fe2ab43d487e3bafc4bf6f6ea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0b91485d45fa45fc83751000fac248ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "028be5c5795a42cdb15c873d8cee1b92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_093af204861341408a6a01da16677461",
              "IPY_MODEL_452ef16bae394188babee8069628fba9",
              "IPY_MODEL_c1dd603cf935424c8fac71fa33c932cb"
            ],
            "layout": "IPY_MODEL_f046af411e764e00ac9ac57b86cb7967"
          }
        },
        "093af204861341408a6a01da16677461": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4dc1a98f843643e983fa7ea7e7b056cc",
            "placeholder": "​",
            "style": "IPY_MODEL_cb09007a7edf4911844010637bb4c154",
            "value": "generation_config.json: 100%"
          }
        },
        "452ef16bae394188babee8069628fba9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2395504f2e784025aae507b4e9cab479",
            "max": 147,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_eefed39c57ca4d0ebc74fce8c4f0d69f",
            "value": 147
          }
        },
        "c1dd603cf935424c8fac71fa33c932cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1ae3d78797b7497abaa59e237fd1eeb3",
            "placeholder": "​",
            "style": "IPY_MODEL_a9f7cc815e5f42c08d30e930a5f2a8e6",
            "value": " 147/147 [00:00&lt;00:00, 5.08kB/s]"
          }
        },
        "f046af411e764e00ac9ac57b86cb7967": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4dc1a98f843643e983fa7ea7e7b056cc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cb09007a7edf4911844010637bb4c154": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2395504f2e784025aae507b4e9cab479": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eefed39c57ca4d0ebc74fce8c4f0d69f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1ae3d78797b7497abaa59e237fd1eeb3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a9f7cc815e5f42c08d30e930a5f2a8e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3387b3051e38482f88810136360c167f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2b3043eddbd34a859bb22b2298ff5c7f",
              "IPY_MODEL_43a6f1b39e144f5bba947246d455479a",
              "IPY_MODEL_56339c3c466047d496bcfe3710b63388"
            ],
            "layout": "IPY_MODEL_a6f0210885ae42dbab8a5c6a15b22417"
          }
        },
        "2b3043eddbd34a859bb22b2298ff5c7f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_12fb33d2b2384eaf9837698772b2aa35",
            "placeholder": "​",
            "style": "IPY_MODEL_abae2090460b4337a45196a1a70d969f",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "43a6f1b39e144f5bba947246d455479a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5a4e633cf97a44dd938c27bce29e4fbe",
            "max": 2539,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3ca591f6d8284af89a39900761dd524e",
            "value": 2539
          }
        },
        "56339c3c466047d496bcfe3710b63388": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6dcf800871cd4fe5a17549329418db6b",
            "placeholder": "​",
            "style": "IPY_MODEL_e886399144af40d4b459ab71de28ce2b",
            "value": " 2.54k/2.54k [00:00&lt;00:00, 54.6kB/s]"
          }
        },
        "a6f0210885ae42dbab8a5c6a15b22417": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "12fb33d2b2384eaf9837698772b2aa35": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "abae2090460b4337a45196a1a70d969f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5a4e633cf97a44dd938c27bce29e4fbe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3ca591f6d8284af89a39900761dd524e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6dcf800871cd4fe5a17549329418db6b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e886399144af40d4b459ab71de28ce2b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "47382c16646b47c38a01b545550342b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3db1e342048647e6ad007e5f0110b466",
              "IPY_MODEL_7b157b162bd64feda184815a9cca7fce",
              "IPY_MODEL_5b1acbc9d25f401ab9bf41ae8d8b40a9"
            ],
            "layout": "IPY_MODEL_719a78e6bddf4d69bbe9a4916c3845d1"
          }
        },
        "3db1e342048647e6ad007e5f0110b466": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_49658d1a60b74c9e94cf54b8d153a6f7",
            "placeholder": "​",
            "style": "IPY_MODEL_769d906307ca45cf8d4e725683eabeb8",
            "value": "spiece.model: 100%"
          }
        },
        "7b157b162bd64feda184815a9cca7fce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a5295bb9fb25435e88f7e81e61553b90",
            "max": 791656,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fbf90211f0944f2bb2d736e1b6a4635c",
            "value": 791656
          }
        },
        "5b1acbc9d25f401ab9bf41ae8d8b40a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eafd07076a7e439a93c32b47a6736f62",
            "placeholder": "​",
            "style": "IPY_MODEL_cacd3236c3dc40619c28e3fbbcbac39e",
            "value": " 792k/792k [00:00&lt;00:00, 1.34MB/s]"
          }
        },
        "719a78e6bddf4d69bbe9a4916c3845d1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49658d1a60b74c9e94cf54b8d153a6f7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "769d906307ca45cf8d4e725683eabeb8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a5295bb9fb25435e88f7e81e61553b90": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbf90211f0944f2bb2d736e1b6a4635c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "eafd07076a7e439a93c32b47a6736f62": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cacd3236c3dc40619c28e3fbbcbac39e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7003b700a9e14c8d995cbdf4f66b23db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6961f28df8424efbb5a4bfd30d96620c",
              "IPY_MODEL_46e578e8bc9c4b5a943cbea2f6984d04",
              "IPY_MODEL_d42f40e4cada4b3dbe5d5b5326e15457"
            ],
            "layout": "IPY_MODEL_467d583e393e4ac98abb36f216a384a6"
          }
        },
        "6961f28df8424efbb5a4bfd30d96620c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_af13c79150cc467d9a6d51b5c2684756",
            "placeholder": "​",
            "style": "IPY_MODEL_dc688fb3545143c8a22b27cd6b0da610",
            "value": "tokenizer.json: 100%"
          }
        },
        "46e578e8bc9c4b5a943cbea2f6984d04": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a7eb0808c00848898799cc475d222e17",
            "max": 2424064,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b1cd7f56a1324157940c5ecafb5fce22",
            "value": 2424064
          }
        },
        "d42f40e4cada4b3dbe5d5b5326e15457": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bd6cb9e624374be99e43437d55754a31",
            "placeholder": "​",
            "style": "IPY_MODEL_ba6ee7562a4547b6b85047130925e789",
            "value": " 2.42M/2.42M [00:00&lt;00:00, 11.3MB/s]"
          }
        },
        "467d583e393e4ac98abb36f216a384a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "af13c79150cc467d9a6d51b5c2684756": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dc688fb3545143c8a22b27cd6b0da610": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a7eb0808c00848898799cc475d222e17": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b1cd7f56a1324157940c5ecafb5fce22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bd6cb9e624374be99e43437d55754a31": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ba6ee7562a4547b6b85047130925e789": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "59a7f28dd2b24a96896c422e99d5c3b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_491236cd25be4a689266885dc131cd38",
              "IPY_MODEL_c3b6a6d4e8394553ab3fd0d0684ae3b5",
              "IPY_MODEL_bc3a45a424bb4d81a1d843430186bfa8"
            ],
            "layout": "IPY_MODEL_1992668bc87a411ba5498c924e562bd7"
          }
        },
        "491236cd25be4a689266885dc131cd38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_13b0b2075de94fc590f361a00883acdf",
            "placeholder": "​",
            "style": "IPY_MODEL_4273ff2bc1f240c99de9f3349b25930c",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "c3b6a6d4e8394553ab3fd0d0684ae3b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0ccddea1d8804f98ab68ed35e3c6af87",
            "max": 2201,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e39e5ee3893d42d5898286d3c33082bd",
            "value": 2201
          }
        },
        "bc3a45a424bb4d81a1d843430186bfa8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_54bfc2a31d854c0d952723719fdab402",
            "placeholder": "​",
            "style": "IPY_MODEL_9155695c9ae84bc18c2a1885c08ba9e0",
            "value": " 2.20k/2.20k [00:00&lt;00:00, 51.0kB/s]"
          }
        },
        "1992668bc87a411ba5498c924e562bd7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "13b0b2075de94fc590f361a00883acdf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4273ff2bc1f240c99de9f3349b25930c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0ccddea1d8804f98ab68ed35e3c6af87": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e39e5ee3893d42d5898286d3c33082bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "54bfc2a31d854c0d952723719fdab402": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9155695c9ae84bc18c2a1885c08ba9e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dev-Faldu/Celebal_Technologies/blob/main/Celebal_Technologies_Backend\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wOnZEGpWF3s",
        "outputId": "d8ab3a7b-96c3-41e2-9ec9-0a3f7288d32c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting fastapi\n",
            "  Downloading fastapi-0.115.12-py3-none-any.whl.metadata (27 kB)\n",
            "Collecting starlette<0.47.0,>=0.40.0 (from fastapi)\n",
            "  Downloading starlette-0.46.2-py3-none-any.whl.metadata (6.2 kB)\n",
            "Requirement already satisfied: pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 in /usr/local/lib/python3.11/dist-packages (from fastapi) (2.10.6)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.11/dist-packages (from fastapi) (4.12.2)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi) (2.27.2)\n",
            "Requirement already satisfied: anyio<5,>=3.6.2 in /usr/local/lib/python3.11/dist-packages (from starlette<0.47.0,>=0.40.0->fastapi) (3.7.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.6.2->starlette<0.47.0,>=0.40.0->fastapi) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.6.2->starlette<0.47.0,>=0.40.0->fastapi) (1.3.1)\n",
            "Downloading fastapi-0.115.12-py3-none-any.whl (95 kB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/95.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading starlette-0.46.2-py3-none-any.whl (72 kB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/72.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: starlette, fastapi\n",
            "Successfully installed fastapi-0.115.12 starlette-0.46.2\n",
            "Collecting uvicorn\n",
            "  Downloading uvicorn-0.34.3-py3-none-any.whl.metadata (6.5 kB)\n",
            "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.11/dist-packages (from uvicorn) (8.1.8)\n",
            "Requirement already satisfied: h11>=0.8 in /usr/local/lib/python3.11/dist-packages (from uvicorn) (0.14.0)\n",
            "Downloading uvicorn-0.34.3-py3-none-any.whl (62 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.4/62.4 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: uvicorn\n",
            "Successfully installed uvicorn-0.34.3\n",
            "Collecting pyngrok\n",
            "  Downloading pyngrok-7.2.11-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n",
            "Downloading pyngrok-7.2.11-py3-none-any.whl (25 kB)\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-7.2.11\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: shap in /usr/local/lib/python3.11/dist-packages (0.46.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from shap) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from shap) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from shap) (1.6.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from shap) (2.2.2)\n",
            "Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.11/dist-packages (from shap) (4.67.1)\n",
            "Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.11/dist-packages (from shap) (24.2)\n",
            "Requirement already satisfied: slicer==0.0.8 in /usr/local/lib/python3.11/dist-packages (from shap) (0.0.8)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.11/dist-packages (from shap) (0.60.0)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from shap) (3.1.1)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba->shap) (0.43.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2025.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->shap) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->shap) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->shap) (1.17.0)\n",
            "Collecting lime\n",
            "  Downloading lime-0.2.0.1.tar.gz (275 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m275.7/275.7 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from lime) (3.10.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from lime) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from lime) (1.13.1)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from lime) (4.67.1)\n",
            "Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.11/dist-packages (from lime) (1.6.1)\n",
            "Requirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.11/dist-packages (from lime) (0.25.2)\n",
            "Requirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (3.4.2)\n",
            "Requirement already satisfied: pillow>=10.1 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (11.1.0)\n",
            "Requirement already satisfied: imageio!=2.35.0,>=2.33 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (2.37.0)\n",
            "Requirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (2025.2.18)\n",
            "Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (24.2)\n",
            "Requirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image>=0.12->lime) (0.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.18->lime) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.18->lime) (3.5.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (1.4.8)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->lime) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->lime) (1.17.0)\n",
            "Building wheels for collected packages: lime\n",
            "  Building wheel for lime (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283834 sha256=fe85917bb93908c4dc029ab45051df8156e2636b9d620aa736d2f15c1027ca41\n",
            "  Stored in directory: /root/.cache/pip/wheels/85/fa/a3/9c2d44c9f3cd77cf4e533b58900b2bf4487f2a17e8ec212a3d\n",
            "Successfully built lime\n",
            "Installing collected packages: lime\n",
            "Successfully installed lime-0.2.0.1\n",
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.48.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.17.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.28.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.0)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.5.1+cu124)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.17.0)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.12.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.5)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2024.10.0)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch)\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch)\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch)\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch)\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch)\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch)\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m82.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m46.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m34.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m106.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n",
            "Requirement already satisfied: langchain in /usr/local/lib/python3.11/dist-packages (0.3.19)\n",
            "Requirement already satisfied: langchain-core<1.0.0,>=0.3.35 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.40)\n",
            "Requirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.6 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.6)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.1.17 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.11)\n",
            "Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.10.6)\n",
            "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.0.38)\n",
            "Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.32.3)\n",
            "Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain) (6.0.2)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from langchain) (3.11.13)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain) (9.0.0)\n",
            "Requirement already satisfied: numpy<2,>=1.26.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (1.26.4)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (2.4.6)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (25.1.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (6.1.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (0.3.0)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.18.3)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.35->langchain) (1.33)\n",
            "Requirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.35->langchain) (24.2)\n",
            "Requirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.35->langchain) (4.12.2)\n",
            "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (0.28.1)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (3.10.15)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (0.23.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (2.27.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (2025.1.31)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain) (3.1.1)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.17->langchain) (3.7.1)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.17->langchain) (1.0.7)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.17->langchain) (0.14.0)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.35->langchain) (3.0.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.17->langchain) (1.3.1)\n",
            "Collecting langchain-community\n",
            "  Downloading langchain_community-0.3.25-py3-none-any.whl.metadata (2.9 kB)\n",
            "Collecting langchain-core<1.0.0,>=0.3.65 (from langchain-community)\n",
            "  Downloading langchain_core-0.3.65-py3-none-any.whl.metadata (5.8 kB)\n",
            "Collecting langchain<1.0.0,>=0.3.25 (from langchain-community)\n",
            "  Downloading langchain-0.3.25-py3-none-any.whl.metadata (7.8 kB)\n",
            "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.0.38)\n",
            "Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.32.3)\n",
            "Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (6.0.2)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (3.11.13)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (9.0.0)\n",
            "Collecting dataclasses-json<0.7,>=0.5.7 (from langchain-community)\n",
            "  Downloading dataclasses_json-0.6.7-py3-none-any.whl.metadata (25 kB)\n",
            "Collecting pydantic-settings<3.0.0,>=2.4.0 (from langchain-community)\n",
            "  Downloading pydantic_settings-2.9.1-py3-none-any.whl.metadata (3.8 kB)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.1.125 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.3.11)\n",
            "Collecting httpx-sse<1.0.0,>=0.4.0 (from langchain-community)\n",
            "  Downloading httpx_sse-0.4.0-py3-none-any.whl.metadata (9.0 kB)\n",
            "Requirement already satisfied: numpy>=1.26.2 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (1.26.4)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (2.4.6)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (25.1.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (6.1.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (0.3.0)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.18.3)\n",
            "Collecting marshmallow<4.0.0,>=3.18.0 (from dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading marshmallow-3.26.1-py3-none-any.whl.metadata (7.3 kB)\n",
            "Collecting typing-inspect<1,>=0.4.0 (from dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading typing_inspect-0.9.0-py3-none-any.whl.metadata (1.5 kB)\n",
            "Collecting langchain-text-splitters<1.0.0,>=0.3.8 (from langchain<1.0.0,>=0.3.25->langchain-community)\n",
            "  Downloading langchain_text_splitters-0.3.8-py3-none-any.whl.metadata (1.9 kB)\n",
            "Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain<1.0.0,>=0.3.25->langchain-community) (2.10.6)\n",
            "Collecting langsmith<0.4,>=0.1.125 (from langchain-community)\n",
            "  Downloading langsmith-0.3.45-py3-none-any.whl.metadata (15 kB)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-community) (1.33)\n",
            "Requirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-community) (24.2)\n",
            "Requirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-community) (4.12.2)\n",
            "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (0.28.1)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (3.10.15)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (0.23.0)\n",
            "Collecting python-dotenv>=0.21.0 (from pydantic-settings<3.0.0,>=2.4.0->langchain-community)\n",
            "  Downloading python_dotenv-1.1.0-py3-none-any.whl.metadata (24 kB)\n",
            "Collecting typing-inspection>=0.4.0 (from pydantic-settings<3.0.0,>=2.4.0->langchain-community)\n",
            "  Downloading typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (2025.1.31)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain-community) (3.1.1)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (3.7.1)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (1.0.7)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (0.14.0)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.65->langchain-community) (3.0.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain<1.0.0,>=0.3.25->langchain-community) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain<1.0.0,>=0.3.25->langchain-community) (2.27.2)\n",
            "Collecting mypy-extensions>=0.3.0 (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community)\n",
            "  Downloading mypy_extensions-1.1.0-py3-none-any.whl.metadata (1.1 kB)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (1.3.1)\n",
            "Downloading langchain_community-0.3.25-py3-none-any.whl (2.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.5/2.5 MB\u001b[0m \u001b[31m46.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dataclasses_json-0.6.7-py3-none-any.whl (28 kB)\n",
            "Downloading httpx_sse-0.4.0-py3-none-any.whl (7.8 kB)\n",
            "Downloading langchain-0.3.25-py3-none-any.whl (1.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m67.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langchain_core-0.3.65-py3-none-any.whl (438 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m438.1/438.1 kB\u001b[0m \u001b[31m40.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langsmith-0.3.45-py3-none-any.whl (363 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.0/363.0 kB\u001b[0m \u001b[31m33.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydantic_settings-2.9.1-py3-none-any.whl (44 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading langchain_text_splitters-0.3.8-py3-none-any.whl (32 kB)\n",
            "Downloading marshmallow-3.26.1-py3-none-any.whl (50 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.9/50.9 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading python_dotenv-1.1.0-py3-none-any.whl (20 kB)\n",
            "Downloading typing_inspect-0.9.0-py3-none-any.whl (8.8 kB)\n",
            "Downloading typing_inspection-0.4.1-py3-none-any.whl (14 kB)\n",
            "Downloading mypy_extensions-1.1.0-py3-none-any.whl (5.0 kB)\n",
            "Installing collected packages: typing-inspection, python-dotenv, mypy-extensions, marshmallow, httpx-sse, typing-inspect, pydantic-settings, langsmith, dataclasses-json, langchain-core, langchain-text-splitters, langchain, langchain-community\n",
            "  Attempting uninstall: langsmith\n",
            "    Found existing installation: langsmith 0.3.11\n",
            "    Uninstalling langsmith-0.3.11:\n",
            "      Successfully uninstalled langsmith-0.3.11\n",
            "  Attempting uninstall: langchain-core\n",
            "    Found existing installation: langchain-core 0.3.40\n",
            "    Uninstalling langchain-core-0.3.40:\n",
            "      Successfully uninstalled langchain-core-0.3.40\n",
            "  Attempting uninstall: langchain-text-splitters\n",
            "    Found existing installation: langchain-text-splitters 0.3.6\n",
            "    Uninstalling langchain-text-splitters-0.3.6:\n",
            "      Successfully uninstalled langchain-text-splitters-0.3.6\n",
            "  Attempting uninstall: langchain\n",
            "    Found existing installation: langchain 0.3.19\n",
            "    Uninstalling langchain-0.3.19:\n",
            "      Successfully uninstalled langchain-0.3.19\n",
            "Successfully installed dataclasses-json-0.6.7 httpx-sse-0.4.0 langchain-0.3.25 langchain-community-0.3.25 langchain-core-0.3.65 langchain-text-splitters-0.3.8 langsmith-0.3.45 marshmallow-3.26.1 mypy-extensions-1.1.0 pydantic-settings-2.9.1 python-dotenv-1.1.0 typing-inspect-0.9.0 typing-inspection-0.4.1\n",
            "Collecting langchain-huggingface\n",
            "  Downloading langchain_huggingface-0.3.0-py3-none-any.whl.metadata (996 bytes)\n",
            "Requirement already satisfied: langchain-core<1.0.0,>=0.3.65 in /usr/local/lib/python3.11/dist-packages (from langchain-huggingface) (0.3.65)\n",
            "Requirement already satisfied: tokenizers>=0.19.1 in /usr/local/lib/python3.11/dist-packages (from langchain-huggingface) (0.21.0)\n",
            "Collecting huggingface-hub>=0.30.2 (from langchain-huggingface)\n",
            "  Downloading huggingface_hub-0.32.6-py3-none-any.whl.metadata (14 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (3.17.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (2024.10.0)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (6.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (4.67.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.30.2->langchain-huggingface) (4.12.2)\n",
            "Collecting hf-xet<2.0.0,>=1.1.2 (from huggingface-hub>=0.30.2->langchain-huggingface)\n",
            "  Downloading hf_xet-1.1.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (879 bytes)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.3.45 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (0.3.45)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (9.0.0)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (1.33)\n",
            "Requirement already satisfied: pydantic>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (2.10.6)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (3.0.0)\n",
            "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (0.28.1)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (3.10.15)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (0.23.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.7.4->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.7.4->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (2.27.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.30.2->langchain-huggingface) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.30.2->langchain-huggingface) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.30.2->langchain-huggingface) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.30.2->langchain-huggingface) (2025.1.31)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (3.7.1)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (1.0.7)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (0.14.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.4,>=0.3.45->langchain-core<1.0.0,>=0.3.65->langchain-huggingface) (1.3.1)\n",
            "Downloading langchain_huggingface-0.3.0-py3-none-any.whl (27 kB)\n",
            "Downloading huggingface_hub-0.32.6-py3-none-any.whl (512 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m512.8/512.8 kB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading hf_xet-1.1.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m102.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: hf-xet, huggingface-hub, langchain-huggingface\n",
            "  Attempting uninstall: huggingface-hub\n",
            "    Found existing installation: huggingface-hub 0.28.1\n",
            "    Uninstalling huggingface-hub-0.28.1:\n",
            "      Successfully uninstalled huggingface-hub-0.28.1\n",
            "Successfully installed hf-xet-1.1.3 huggingface-hub-0.32.6 langchain-huggingface-0.3.0\n",
            "Requirement already satisfied: pydantic in /usr/local/lib/python3.11/dist-packages (2.10.6)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic) (2.27.2)\n",
            "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.11/dist-packages (from pydantic) (4.12.2)\n",
            "Collecting python-multipart\n",
            "  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n",
            "Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n",
            "Installing collected packages: python-multipart\n",
            "Successfully installed python-multipart-0.0.20\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (1.6.0)\n",
            "Collecting aiofiles\n",
            "  Downloading aiofiles-24.1.0-py3-none-any.whl.metadata (10 kB)\n",
            "Downloading aiofiles-24.1.0-py3-none-any.whl (15 kB)\n",
            "Installing collected packages: aiofiles\n",
            "Successfully installed aiofiles-24.1.0\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (0.21.1)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (5.9.5)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly) (24.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.11/dist-packages (from seaborn) (1.26.4)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.11/dist-packages (from seaborn) (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.13.1)\n",
            "Requirement already satisfied: numpy<2.3,>=1.22.4 in /usr/local/lib/python3.11/dist-packages (from scipy) (1.26.4)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.4.2)\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import sys\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "!pip install fastapi\n",
        "!pip install uvicorn\n",
        "!pip install pyngrok\n",
        "!pip install pandas\n",
        "!pip install numpy\n",
        "!pip install scikit-learn\n",
        "!pip install shap\n",
        "!pip install lime\n",
        "!pip install transformers\n",
        "!pip install torch\n",
        "!pip install langchain\n",
        "!pip install langchain-community\n",
        "!pip install langchain-huggingface\n",
        "!pip install pydantic\n",
        "!pip install python-multipart\n",
        "!pip install nest-asyncio\n",
        "!pip install aiofiles\n",
        "!pip install prometheus-client\n",
        "!pip install psutil\n",
        "!pip install plotly\n",
        "!pip install seaborn\n",
        "!pip install matplotlib\n",
        "!pip install scipy\n",
        "!pip install joblib\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 📊 Core Imports & Advanced Configuration\n",
        "# ============================================================================\n",
        "\n",
        "# Core system imports\n",
        "import asyncio\n",
        "import uuid\n",
        "import json\n",
        "import logging\n",
        "import datetime\n",
        "from typing import Dict, List, Optional, Any, Union\n",
        "from pathlib import Path\n",
        "import traceback\n",
        "import hashlib\n",
        "import pickle\n",
        "from collections import deque\n",
        "import threading\n",
        "import time\n",
        "\n",
        "# Data science & ML stack\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.linear_model import ElasticNet\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "import joblib\n",
        "\n",
        "# Advanced analytics & explainability\n",
        "import shap\n",
        "from lime import lime_tabular\n",
        "from scipy import stats\n",
        "\n",
        "# Deep learning & NLP\n",
        "import torch\n",
        "import transformers\n",
        "from transformers import pipeline, AutoTokenizer, AutoModelForSeq2SeqLM\n",
        "\n",
        "# API framework\n",
        "from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends, Request\n",
        "from fastapi.middleware.cors import CORSMiddleware\n",
        "from fastapi.responses import JSONResponse, HTMLResponse\n",
        "from pydantic import BaseModel, validator, Field\n",
        "import uvicorn\n",
        "\n",
        "# Deployment & tunneling\n",
        "from pyngrok import ngrok\n",
        "import nest_asyncio\n",
        "\n",
        "# Advanced monitoring\n",
        "from prometheus_client import Counter, Histogram, generate_latest\n",
        "import psutil\n",
        "\n",
        "# Visualization\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Enable nested async loops for Colab\n",
        "nest_asyncio.apply()\n",
        "\n",
        "# Configure logging\n",
        "logging.basicConfig(\n",
        "    level=logging.INFO,\n",
        "    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n",
        ")\n",
        "logger = logging.getLogger(\"CLIS\")\n",
        "\n",
        "print(\"✅ Core imports and configuration completed!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tzBYwjTpW4g2",
        "outputId": "83d6c5c4-709a-4efb-b8e3-49df2b4f991b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Core imports and configuration completed!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🗂️ Load and Explore Portuguese Student Dataset\n",
        "# ============================================================================\n",
        "\n",
        "# Upload the CSV file\n",
        "from google.colab import files\n",
        "import io\n",
        "\n",
        "print(\"📁 Please upload your student-por.csv file:\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Load the dataset\n",
        "file_name = list(uploaded.keys())[0]\n",
        "df = pd.read_csv(io.BytesIO(uploaded[file_name]), sep=';')\n",
        "\n",
        "print(f\"📊 Portuguese Student Dataset Loaded Successfully!\")\n",
        "print(f\"Dataset shape: {df.shape}\")\n",
        "print(f\"Features: {list(df.columns)}\")\n",
        "\n",
        "# Display basic statistics\n",
        "print(\"\\n📈 Dataset Overview:\")\n",
        "print(df.head())\n",
        "print(f\"\\n📊 Target Variable (G3) Distribution:\")\n",
        "print(df['G3'].describe())\n",
        "print(f\"\\n🔍 Missing Values: {df.isnull().sum().sum()}\")\n",
        "\n",
        "# Visualize grade distribution\n",
        "fig = px.histogram(df, x='G3', nbins=20, title='Final Grade (G3) Distribution')\n",
        "fig.show()\n",
        "\n",
        "print(\"✅ Dataset loaded and analyzed successfully!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "F8q4pFOeXgAO",
        "outputId": "2a28abf2-7511-4ef9-ed50-ebcc3d015128"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📁 Please upload your student-por.csv file:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b29404b5-24f9-46b0-a106-cabbc3de82f6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b29404b5-24f9-46b0-a106-cabbc3de82f6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving student-por.csv to student-por.csv\n",
            "📊 Portuguese Student Dataset Loaded Successfully!\n",
            "Dataset shape: (649, 33)\n",
            "Features: ['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2', 'G3']\n",
            "\n",
            "📈 Dataset Overview:\n",
            "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n",
            "0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n",
            "1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n",
            "2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n",
            "3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n",
            "4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n",
            "\n",
            "  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
            "0      4        3      4     1     1      3        4   0  11  11  \n",
            "1      5        3      3     1     1      3        2   9  11  11  \n",
            "2      4        3      2     2     3      3        6  12  13  12  \n",
            "3      3        2      2     1     1      5        0  14  14  14  \n",
            "4      4        3      2     1     2      5        0  11  13  13  \n",
            "\n",
            "[5 rows x 33 columns]\n",
            "\n",
            "📊 Target Variable (G3) Distribution:\n",
            "count    649.000000\n",
            "mean      11.906009\n",
            "std        3.230656\n",
            "min        0.000000\n",
            "25%       10.000000\n",
            "50%       12.000000\n",
            "75%       14.000000\n",
            "max       19.000000\n",
            "Name: G3, dtype: float64\n",
            "\n",
            "🔍 Missing Values: 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"6d733907-37d9-4560-978c-bd4a4f685430\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6d733907-37d9-4560-978c-bd4a4f685430\")) {                    Plotly.newPlot(                        \"6d733907-37d9-4560-978c-bd4a4f685430\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"G3=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"nbinsx\":20,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[11,11,12,14,13,13,13,13,17,13,14,13,12,13,15,17,14,14,7,12,14,12,14,10,10,12,12,11,13,12,11,15,15,12,12,11,14,13,12,12,10,11,15,10,11,11,13,17,13,12,13,16,9,12,13,12,15,16,14,16,16,16,10,13,12,16,12,10,11,15,11,10,11,14,11,11,11,13,10,11,12,9,11,13,12,12,11,15,11,10,11,13,12,14,12,13,11,12,13,13,8,16,12,10,16,10,10,14,11,14,14,11,10,18,10,14,16,15,11,14,14,13,13,13,11,9,11,11,15,13,12,8,11,13,12,14,11,11,11,15,10,13,12,11,11,10,10,14,9,11,9,13,11,13,11,6,12,10,11,13,11,8,11,0,10,13,11,13,8,10,11,11,1,10,9,8,10,8,8,8,11,18,13,17,10,18,10,13,15,11,14,10,11,13,11,13,17,14,16,14,11,16,14,10,13,12,12,10,12,16,14,12,16,11,15,12,15,13,13,8,12,15,13,12,12,12,13,11,11,15,10,10,13,13,11,12,14,10,16,8,17,11,11,16,12,13,13,14,9,12,16,10,13,10,10,7,8,9,15,10,11,13,8,8,10,15,14,15,12,15,15,12,15,11,10,11,16,11,13,5,10,11,7,10,6,12,13,10,13,17,11,11,14,14,13,14,16,10,12,12,15,11,12,13,13,9,16,14,12,14,10,12,16,13,18,15,16,12,10,12,13,15,10,10,11,10,13,18,13,14,14,12,18,14,15,17,16,18,19,15,15,13,14,17,17,15,13,8,16,18,11,15,11,11,15,14,17,17,15,17,14,10,13,14,17,17,13,14,11,11,9,10,13,10,17,15,14,13,17,10,13,15,11,12,10,10,15,15,12,12,14,14,15,15,16,13,17,14,14,17,17,14,13,15,16,11,13,12,12,15,17,15,17,10,15,11,18,17,14,11,17,10,13,11,12,10,11,17,9,11,11,10,7,14,11,10,8,12,12,16,0,9,14,8,11,9,11,9,17,13,15,11,11,8,8,9,15,11,13,10,11,14,14,12,11,8,11,14,13,13,12,12,16,10,11,14,8,11,8,10,10,11,9,11,8,11,10,10,9,10,10,9,10,10,9,13,14,10,14,16,7,13,9,14,13,11,10,10,9,18,17,10,7,8,7,10,16,15,8,0,8,10,8,6,8,16,14,10,9,11,9,10,8,16,12,10,14,12,11,10,11,11,12,8,12,8,16,11,11,18,13,13,10,12,10,13,11,10,10,13,10,10,12,0,10,9,9,0,9,8,8,9,7,10,10,10,11,11,10,9,10,8,7,0,11,8,0,8,9,10,7,14,13,14,18,17,18,0,11,14,14,10,13,0,10,0,18,12,11,12,0,15,11,10,12,15,14,18,15,13,15,13,9,16,9,10,0,10,12,9,17,12,9,14,16,9,19,0,16,0,0,15,11,10,10,16,9,10,11],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"G3\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"count\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Final Grade (G3) Distribution\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('6d733907-37d9-4560-978c-bd4a4f685430');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Dataset loaded and analyzed successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🧠 Ultra-Advanced ML Pipeline with Portuguese Data\n",
        "# ============================================================================\n",
        "\n",
        "class UltraAdvancedMLPipeline:\n",
        "    \"\"\"Next-generation ML pipeline with ensemble methods and auto-tuning\"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        self.models = {}\n",
        "        self.scalers = {}\n",
        "        self.encoders = {}\n",
        "        self.feature_names = []\n",
        "        self.model_metrics = {}\n",
        "        self.best_model = None\n",
        "        self.ensemble_weights = {}\n",
        "        self.feature_importance = {}\n",
        "        self.training_history = []\n",
        "\n",
        "    def preprocess_data(self, df):\n",
        "        \"\"\"Advanced preprocessing for Portuguese student dataset\"\"\"\n",
        "        print(\"🔧 Advanced preprocessing of Portuguese student data...\")\n",
        "\n",
        "        data = df.copy()\n",
        "\n",
        "        # Encode categorical variables\n",
        "        categorical_features = ['school', 'sex', 'address', 'famsize', 'Pstatus',\n",
        "                              'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup',\n",
        "                              'famsup', 'paid', 'activities', 'nursery', 'higher',\n",
        "                              'internet', 'romantic']\n",
        "\n",
        "        for feature in categorical_features:\n",
        "            if feature in data.columns:\n",
        "                le = LabelEncoder()\n",
        "                data[f'{feature}_encoded'] = le.fit_transform(data[feature].astype(str))\n",
        "                self.encoders[feature] = le\n",
        "\n",
        "        return data\n",
        "\n",
        "    def engineer_advanced_features(self, data):\n",
        "        \"\"\"Create sophisticated features based on educational domain knowledge\"\"\"\n",
        "        print(\"🔬 Engineering advanced educational features...\")\n",
        "\n",
        "        # Academic performance features\n",
        "        data['grade_progression'] = data['G2'] - data['G1']\n",
        "        data['grade_average'] = (data['G1'] + data['G2']) / 2\n",
        "        data['grade_consistency'] = 1 - abs(data['G2'] - data['G1']) / 20\n",
        "        data['academic_trajectory'] = np.where(data['grade_progression'] > 0, 1, 0)\n",
        "\n",
        "        # Study and effort metrics\n",
        "        data['study_efficiency'] = data['grade_average'] / (data['studytime'] + 1)\n",
        "        data['attendance_rate'] = np.clip(1 - (data['absences'] / 50), 0, 1)\n",
        "        data['failure_impact'] = np.exp(-data['failures'])\n",
        "\n",
        "        # Family and social factors\n",
        "        data['parental_education'] = (data['Medu'] + data['Fedu']) / 2\n",
        "        data['family_support_score'] = (\n",
        "            data['famrel'] * 0.4 +\n",
        "            data.get('famsup_encoded', 0) * 0.3 +\n",
        "            data['parental_education'] * 0.3\n",
        "        ) / 3\n",
        "\n",
        "        # Lifestyle and health factors\n",
        "        data['social_balance'] = (data['freetime'] + data['goout']) / 2\n",
        "        data['alcohol_risk'] = (data.get('Dalc', 1) + data.get('Walc', 1)) / 2\n",
        "        data['health_wellness'] = data['health'] / 5\n",
        "\n",
        "        # Advanced composite scores matching your original features\n",
        "        data['Effort Score'] = np.clip((\n",
        "            data['studytime'] * 0.3 +\n",
        "            data['failure_impact'] * 0.3 +\n",
        "            data['attendance_rate'] * 0.4\n",
        "        ), 0, 1)\n",
        "\n",
        "        data['Emotional Sentiment'] = np.clip((\n",
        "            data['famrel'] * 0.3 +\n",
        "            data['health'] * 0.3 +\n",
        "            (6 - data['social_balance']) * 0.2 +\n",
        "            data['family_support_score'] * 0.2\n",
        "        ) / 15, 0, 1)\n",
        "\n",
        "        data['Participation Index'] = np.clip((\n",
        "            data['study_efficiency'] * 0.4 +\n",
        "            data['attendance_rate'] * 0.3 +\n",
        "            data.get('activities_encoded', 0) * 0.3\n",
        "        ), 0, 1)\n",
        "\n",
        "        # Select final feature set\n",
        "        self.feature_names = [\n",
        "            'studytime', 'G1', 'G2', 'absences',\n",
        "            'Effort Score', 'Emotional Sentiment', 'Participation Index'\n",
        "        ]\n",
        "\n",
        "        print(f\"✅ Created {len(self.feature_names)} advanced features\")\n",
        "        return data\n",
        "\n",
        "    def prepare_training_data(self, data):\n",
        "        \"\"\"Prepare data for model training\"\"\"\n",
        "        print(\"🎯 Preparing training data...\")\n",
        "\n",
        "        X = data[self.feature_names].copy()\n",
        "        y = data['G3'].copy()\n",
        "\n",
        "        # Handle missing values\n",
        "        X = X.fillna(X.median())\n",
        "\n",
        "        # Remove outliers using IQR method\n",
        "        Q1 = y.quantile(0.25)\n",
        "        Q3 = y.quantile(0.75)\n",
        "        IQR = Q3 - Q1\n",
        "        lower_bound = Q1 - 1.5 * IQR\n",
        "        upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "        mask = (y >= lower_bound) & (y <= upper_bound)\n",
        "        X = X[mask]\n",
        "        y = y[mask]\n",
        "\n",
        "        print(f\"✅ Training data prepared: {len(X)} samples, {len(X.columns)} features\")\n",
        "        return X, y\n",
        "\n",
        "    def train_ensemble_models(self, X, y):\n",
        "        \"\"\"Train ensemble of advanced models\"\"\"\n",
        "        print(\"🚀 Training ensemble of advanced models...\")\n",
        "\n",
        "        # Split data\n",
        "        X_train, X_test, y_train, y_test = train_test_split(\n",
        "            X, y, test_size=0.2, random_state=42,\n",
        "            stratify=pd.cut(y, bins=5, labels=False)\n",
        "        )\n",
        "\n",
        "        # Scale features\n",
        "        self.scalers['standard'] = StandardScaler()\n",
        "        X_train_scaled = self.scalers['standard'].fit_transform(X_train)\n",
        "        X_test_scaled = self.scalers['standard'].transform(X_test)\n",
        "\n",
        "        # Model configurations\n",
        "        model_configs = {\n",
        "            'mlp': {\n",
        "                'model': MLPRegressor(random_state=42, max_iter=1000, early_stopping=True),\n",
        "                'params': {\n",
        "                    'hidden_layer_sizes': [(100, 50), (150, 75), (200, 100)],\n",
        "                    'activation': ['relu'],\n",
        "                    'alpha': [0.001, 0.01],\n",
        "                    'learning_rate': ['adaptive']\n",
        "                },\n",
        "                'use_scaled': True\n",
        "            },\n",
        "            'rf': {\n",
        "                'model': RandomForestRegressor(random_state=42, n_jobs=-1),\n",
        "                'params': {\n",
        "                    'n_estimators': [100, 200],\n",
        "                    'max_depth': [10, 15, None],\n",
        "                    'min_samples_split': [5, 10]\n",
        "                },\n",
        "                'use_scaled': False\n",
        "            },\n",
        "            'gb': {\n",
        "                'model': GradientBoostingRegressor(random_state=42),\n",
        "                'params': {\n",
        "                    'n_estimators': [100, 150],\n",
        "                    'learning_rate': [0.1, 0.15],\n",
        "                    'max_depth': [3, 5]\n",
        "                },\n",
        "                'use_scaled': False\n",
        "            }\n",
        "        }\n",
        "\n",
        "        # Train models\n",
        "        for name, config in model_configs.items():\n",
        "            print(f\"🔥 Training {name.upper()}...\")\n",
        "\n",
        "            if config['use_scaled']:\n",
        "                X_train_model = X_train_scaled\n",
        "                X_test_model = X_test_scaled\n",
        "            else:\n",
        "                X_train_model = X_train\n",
        "                X_test_model = X_test\n",
        "\n",
        "            grid_search = GridSearchCV(\n",
        "                config['model'], config['params'],\n",
        "                cv=3, scoring='r2', n_jobs=-1\n",
        "            )\n",
        "\n",
        "            grid_search.fit(X_train_model, y_train)\n",
        "            best_model = grid_search.best_estimator_\n",
        "\n",
        "            y_pred = best_model.predict(X_test_model)\n",
        "\n",
        "            metrics = {\n",
        "                'r2': r2_score(y_test, y_pred),\n",
        "                'rmse': np.sqrt(mean_squared_error(y_test, y_pred)),\n",
        "                'mae': mean_absolute_error(y_test, y_pred),\n",
        "                'best_params': grid_search.best_params_\n",
        "            }\n",
        "\n",
        "            self.models[name] = best_model\n",
        "            self.model_metrics[name] = metrics\n",
        "\n",
        "            print(f\"✅ {name.upper()}: R² = {metrics['r2']:.4f}, RMSE = {metrics['rmse']:.4f}\")\n",
        "\n",
        "        # Calculate ensemble weights\n",
        "        total_r2 = sum([m['r2'] for m in self.model_metrics.values()])\n",
        "        self.ensemble_weights = {\n",
        "            name: metrics['r2'] / total_r2\n",
        "            for name, metrics in self.model_metrics.items()\n",
        "        }\n",
        "\n",
        "        self.best_model = max(\n",
        "            self.model_metrics.keys(),\n",
        "            key=lambda x: self.model_metrics[x]['r2']\n",
        "        )\n",
        "\n",
        "        # Evaluate ensemble\n",
        "        ensemble_pred = self.predict_ensemble(X_test)\n",
        "        ensemble_r2 = r2_score(y_test, ensemble_pred)\n",
        "        ensemble_rmse = np.sqrt(mean_squared_error(y_test, ensemble_pred))\n",
        "\n",
        "        self.model_metrics['ensemble'] = {\n",
        "            'r2': ensemble_r2,\n",
        "            'rmse': ensemble_rmse,\n",
        "            'weights': self.ensemble_weights\n",
        "        }\n",
        "\n",
        "        print(f\"🏆 Best Model: {self.best_model.upper()}\")\n",
        "        print(f\"🎯 Ensemble: R² = {ensemble_r2:.4f}, RMSE = {ensemble_rmse:.4f}\")\n",
        "\n",
        "        return X_test, y_test\n",
        "\n",
        "    def predict_ensemble(self, X):\n",
        "        \"\"\"Make ensemble predictions\"\"\"\n",
        "        predictions = {}\n",
        "        for name, model in self.models.items():\n",
        "            if name in ['mlp']:\n",
        "                X_scaled = self.scalers['standard'].transform(X)\n",
        "                predictions[name] = model.predict(X_scaled)\n",
        "            else:\n",
        "                predictions[name] = model.predict(X)\n",
        "\n",
        "        ensemble_pred = np.zeros(len(X))\n",
        "        for name, pred in predictions.items():\n",
        "            ensemble_pred += pred * self.ensemble_weights[name]\n",
        "\n",
        "        return ensemble_pred\n",
        "\n",
        "    def train_complete_pipeline(self, df):\n",
        "        \"\"\"Complete training pipeline\"\"\"\n",
        "        print(\"🚀 Starting complete ML pipeline training...\")\n",
        "\n",
        "        processed_data = self.preprocess_data(df)\n",
        "        featured_data = self.engineer_advanced_features(processed_data)\n",
        "        X, y = self.prepare_training_data(featured_data)\n",
        "        X_test, y_test = self.train_ensemble_models(X, y)\n",
        "\n",
        "        print(\"✅ Complete pipeline training finished!\")\n",
        "        return True\n",
        "\n",
        "    def save_pipeline(self, path='clis_portuguese_model.joblib'):\n",
        "        \"\"\"Save complete pipeline\"\"\"\n",
        "        pipeline_data = {\n",
        "            'models': self.models,\n",
        "            'scalers': self.scalers,\n",
        "            'encoders': self.encoders,\n",
        "            'feature_names': self.feature_names,\n",
        "            'model_metrics': self.model_metrics,\n",
        "            'best_model': self.best_model,\n",
        "            'ensemble_weights': self.ensemble_weights\n",
        "        }\n",
        "        joblib.dump(pipeline_data, path)\n",
        "        print(f\"💾 Pipeline saved to {path}\")\n",
        "\n",
        "# Initialize and train the pipeline\n",
        "print(\"🚀 Initializing Ultra-Advanced ML Pipeline...\")\n",
        "ml_pipeline = UltraAdvancedMLPipeline()\n",
        "ml_pipeline.train_complete_pipeline(df)\n",
        "ml_pipeline.save_pipeline()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XjUGM_RcXpht",
        "outputId": "55c52e9d-863b-4fba-ecbe-95018c3c47f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 Initializing Ultra-Advanced ML Pipeline...\n",
            "🚀 Starting complete ML pipeline training...\n",
            "🔧 Advanced preprocessing of Portuguese student data...\n",
            "🔬 Engineering advanced educational features...\n",
            "✅ Created 7 advanced features\n",
            "🎯 Preparing training data...\n",
            "✅ Training data prepared: 633 samples, 7 features\n",
            "🚀 Training ensemble of advanced models...\n",
            "🔥 Training MLP...\n",
            "✅ MLP: R² = 0.8835, RMSE = 0.9056\n",
            "🔥 Training RF...\n",
            "✅ RF: R² = 0.8896, RMSE = 0.8815\n",
            "🔥 Training GB...\n",
            "✅ GB: R² = 0.8842, RMSE = 0.9028\n",
            "🏆 Best Model: RF\n",
            "🎯 Ensemble: R² = 0.8944, RMSE = 0.8624\n",
            "✅ Complete pipeline training finished!\n",
            "💾 Pipeline saved to clis_portuguese_model.joblib\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🔍 Ultra-Advanced Explainable AI System\n",
        "# ============================================================================\n",
        "\n",
        "class AdvancedExplainableAI:\n",
        "    \"\"\"State-of-the-art explainable AI system\"\"\"\n",
        "\n",
        "    def __init__(self, ml_pipeline):\n",
        "        self.ml_pipeline = ml_pipeline\n",
        "        self.shap_explainer = None\n",
        "        self.lime_explainer = None\n",
        "        self.feature_importance = {}\n",
        "        self._initialize_explainers()\n",
        "\n",
        "    def _initialize_explainers(self):\n",
        "        \"\"\"Initialize SHAP and LIME explainers\"\"\"\n",
        "        print(\"🔍 Initializing advanced explainers...\")\n",
        "\n",
        "        try:\n",
        "            # Create background data for SHAP\n",
        "            sample_data = df.sample(100, random_state=42)\n",
        "            processed_sample = self.ml_pipeline.preprocess_data(sample_data)\n",
        "            featured_sample = self.ml_pipeline.engineer_advanced_features(processed_sample)\n",
        "            X_background = featured_sample[self.ml_pipeline.feature_names]\n",
        "\n",
        "            # Use the best model for SHAP\n",
        "            best_model = self.ml_pipeline.models[self.ml_pipeline.best_model]\n",
        "\n",
        "            if self.ml_pipeline.best_model in ['mlp']:\n",
        "                X_background_scaled = self.ml_pipeline.scalers['standard'].transform(X_background)\n",
        "                self.shap_explainer = shap.KernelExplainer(\n",
        "                    best_model.predict, X_background_scaled[:50]\n",
        "                )\n",
        "            else:\n",
        "                self.shap_explainer = shap.TreeExplainer(best_model)\n",
        "\n",
        "            # Initialize LIME explainer\n",
        "            X_background_array = X_background.values\n",
        "            self.lime_explainer = lime_tabular.LimeTabularExplainer(\n",
        "                X_background_array,\n",
        "                feature_names=self.ml_pipeline.feature_names,\n",
        "                mode='regression'\n",
        "            )\n",
        "\n",
        "            print(\"✅ Advanced explainers initialized!\")\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"⚠️ Explainer initialization failed: {e}\")\n",
        "            self.shap_explainer = None\n",
        "            self.lime_explainer = None\n",
        "\n",
        "    def get_feature_explanation(self, student_features):\n",
        "        \"\"\"Get comprehensive feature explanations\"\"\"\n",
        "        try:\n",
        "            feature_array = np.array([student_features]).reshape(1, -1)\n",
        "\n",
        "            if self.shap_explainer:\n",
        "                if self.ml_pipeline.best_model in ['mlp']:\n",
        "                    feature_array_scaled = self.ml_pipeline.scalers['standard'].transform(feature_array)\n",
        "                    shap_values = self.shap_explainer.shap_values(feature_array_scaled)\n",
        "                else:\n",
        "                    shap_values = self.shap_explainer.shap_values(feature_array)\n",
        "\n",
        "                explanation = {}\n",
        "                importance = {}\n",
        "\n",
        "                for i, feature in enumerate(self.ml_pipeline.feature_names):\n",
        "                    if hasattr(shap_values, '__len__') and len(shap_values) > 0:\n",
        "                        if hasattr(shap_values[0], '__getitem__'):\n",
        "                            shap_val = float(shap_values[0][i])\n",
        "                        else:\n",
        "                            shap_val = float(shap_values[i])\n",
        "                    else:\n",
        "                        shap_val = 0.0\n",
        "\n",
        "                    explanation[feature] = shap_val\n",
        "                    importance[feature] = abs(shap_val)\n",
        "\n",
        "                top_factors = sorted(importance.items(), key=lambda x: x[1], reverse=True)\n",
        "                top_factors = [factor[0] for factor in top_factors[:3]]\n",
        "\n",
        "                return explanation, importance, top_factors\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"❌ SHAP explanation error: {e}\")\n",
        "\n",
        "        # Fallback explanation\n",
        "        return self._fallback_explanation(student_features)\n",
        "\n",
        "    def _fallback_explanation(self, student_features):\n",
        "        \"\"\"Fallback explanation method\"\"\"\n",
        "        explanation = {}\n",
        "        importance = {}\n",
        "\n",
        "        feature_impacts = {\n",
        "            'studytime': 0.8,\n",
        "            'G1': 1.2,\n",
        "            'G2': 1.5,\n",
        "            'absences': -0.6,\n",
        "            'Effort Score': 1.0,\n",
        "            'Emotional Sentiment': 0.7,\n",
        "            'Participation Index': 0.9\n",
        "        }\n",
        "\n",
        "        for i, feature in enumerate(self.ml_pipeline.feature_names):\n",
        "            if i < len(student_features):\n",
        "                value = student_features[i]\n",
        "                impact = value * feature_impacts.get(feature, 0.5)\n",
        "                explanation[feature] = float(impact)\n",
        "                importance[feature] = abs(impact)\n",
        "\n",
        "        top_factors = list(importance.keys())[:3]\n",
        "        return explanation, importance, top_factors\n",
        "\n",
        "# Initialize explainable AI\n",
        "explainer = AdvancedExplainableAI(ml_pipeline)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eAz3smePX2Ni",
        "outputId": "3fc3c13f-020f-459e-f14d-1e6e78259a01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Initializing advanced explainers...\n",
            "🔧 Advanced preprocessing of Portuguese student data...\n",
            "🔬 Engineering advanced educational features...\n",
            "✅ Created 7 advanced features\n",
            "✅ Advanced explainers initialized!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🤖 Ultra-Advanced AI Summary & Intervention System\n",
        "# ============================================================================\n",
        "\n",
        "class AdvancedAISummary:\n",
        "    \"\"\"AI-powered summary system with LangChain and Flan-T5\"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        self.model_name = \"google/flan-t5-small\"\n",
        "        self.pipeline = None\n",
        "        self.intervention_templates = {\n",
        "            'low_performance': [\n",
        "                \"Implement intensive tutoring sessions with personalized learning plans\",\n",
        "                \"Create structured study schedules with regular progress monitoring\"\n",
        "            ],\n",
        "            'attendance_issues': [\n",
        "                \"Develop attendance improvement plan with family engagement\",\n",
        "                \"Implement flexible learning options and makeup sessions\"\n",
        "            ],\n",
        "            'study_habits': [\n",
        "                \"Introduce effective study techniques and time management skills\",\n",
        "                \"Create distraction-free study environments and routines\"\n",
        "            ],\n",
        "            'emotional_support': [\n",
        "                \"Provide counseling support for emotional well-being\",\n",
        "                \"Implement stress management and coping strategies\"\n",
        "            ]\n",
        "        }\n",
        "        self._initialize_model()\n",
        "\n",
        "    def _initialize_model(self):\n",
        "        \"\"\"Initialize the language model\"\"\"\n",
        "        try:\n",
        "            print(\"🤖 Initializing AI summary system...\")\n",
        "\n",
        "            self.pipeline = pipeline(\n",
        "                \"text2text-generation\",\n",
        "                model=self.model_name,\n",
        "                tokenizer=self.model_name,\n",
        "                max_length=256,\n",
        "                device=0 if torch.cuda.is_available() else -1\n",
        "            )\n",
        "\n",
        "            print(\"✅ AI summary system initialized!\")\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"⚠️ Error initializing model: {e}\")\n",
        "            self.pipeline = None\n",
        "\n",
        "    def generate_summary(self, student_data: dict, predicted_score: float):\n",
        "        \"\"\"Generate comprehensive student summary and interventions\"\"\"\n",
        "\n",
        "        # Create LangChain prompt\n",
        "        prompt = f\"\"\"Student Profile:\n",
        "- studytime: {student_data.get('studytime', 0)}\n",
        "- G1: {student_data.get('G1', 0)}\n",
        "- G2: {student_data.get('G2', 0)}\n",
        "- absences: {student_data.get('absences', 0)}\n",
        "- Effort Score: {student_data.get('effort_score', 0)}\n",
        "- Emotional Sentiment: {student_data.get('sentiment', 0)}\n",
        "- Participation Index: {student_data.get('participation', 0)}\n",
        "- Predicted Score: {predicted_score}\n",
        "\n",
        "Write a short performance summary (3 lines) and suggest 2 personalized interventions.\"\"\"\n",
        "\n",
        "        try:\n",
        "            if self.pipeline:\n",
        "                response = self.pipeline(\n",
        "                    prompt,\n",
        "                    max_length=200,\n",
        "                    num_return_sequences=1,\n",
        "                    temperature=0.7,\n",
        "                    do_sample=True\n",
        "                )[0]['generated_text']\n",
        "\n",
        "                summary, interventions = self._parse_response(response, student_data, predicted_score)\n",
        "            else:\n",
        "                summary, interventions = self._fallback_summary(student_data, predicted_score)\n",
        "\n",
        "            return summary, interventions, 0.85\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Summary generation error: {e}\")\n",
        "            return self._fallback_summary(student_data, predicted_score)\n",
        "\n",
        "    def _parse_response(self, response: str, student_data: dict, predicted_score: float):\n",
        "        \"\"\"Parse AI response into structured format\"\"\"\n",
        "        lines = response.strip().split('\\n')\n",
        "        summary_lines = []\n",
        "        interventions = []\n",
        "\n",
        "        for line in lines:\n",
        "            line = line.strip()\n",
        "            if line and len(summary_lines) < 3:\n",
        "                summary_lines.append(line)\n",
        "            elif line and ('intervention' in line.lower() or 'recommend' in line.lower()):\n",
        "                interventions.append(line)\n",
        "\n",
        "        if len(summary_lines) < 3:\n",
        "            return self._fallback_summary(student_data, predicted_score)\n",
        "\n",
        "        summary = ' '.join(summary_lines)\n",
        "\n",
        "        if len(interventions) < 2:\n",
        "            interventions = self._generate_interventions(student_data, predicted_score)\n",
        "\n",
        "        return summary, interventions[:2]\n",
        "\n",
        "    def _fallback_summary(self, student_data: dict, predicted_score: float):\n",
        "        \"\"\"Generate rule-based summary\"\"\"\n",
        "\n",
        "        grade_trend = student_data.get('G2', 0) - student_data.get('G1', 0)\n",
        "        performance_level = \"excellent\" if predicted_score >= 16 else \"good\" if predicted_score >= 12 else \"needs improvement\"\n",
        "\n",
        "        summary = f\"Student demonstrates {performance_level} academic performance with a predicted score of {predicted_score:.1f}/20. \"\n",
        "\n",
        "        if grade_trend > 0:\n",
        "            summary += f\"Positive grade progression from G1 to G2 (+{grade_trend:.1f} points) indicates improving understanding. \"\n",
        "        else:\n",
        "            summary += f\"Grade decline from G1 to G2 ({grade_trend:.1f} points) suggests need for additional support. \"\n",
        "\n",
        "        if student_data.get('effort_score', 0) >= 0.6:\n",
        "            summary += \"Good effort levels provide a strong foundation for continued success.\"\n",
        "        else:\n",
        "            summary += \"Effort levels require attention to maximize academic potential.\"\n",
        "\n",
        "        interventions = self._generate_interventions(student_data, predicted_score)\n",
        "\n",
        "        return summary, interventions\n",
        "\n",
        "    def _generate_interventions(self, student_data: dict, predicted_score: float):\n",
        "        \"\"\"Generate targeted interventions\"\"\"\n",
        "        interventions = []\n",
        "\n",
        "        if student_data.get('studytime', 0) < 2:\n",
        "            interventions.extend(self.intervention_templates['study_habits'][:1])\n",
        "\n",
        "        if student_data.get('absences', 0) > 5:\n",
        "            interventions.extend(self.intervention_templates['attendance_issues'][:1])\n",
        "\n",
        "        if student_data.get('effort_score', 0) < 0.6:\n",
        "            interventions.append(\"Implement motivational strategies and goal-setting frameworks\")\n",
        "\n",
        "        if student_data.get('sentiment', 0) < 0.5:\n",
        "            interventions.extend(self.intervention_templates['emotional_support'][:1])\n",
        "\n",
        "        if not interventions:\n",
        "            interventions = [\n",
        "                \"Continue current positive learning strategies and maintain momentum\",\n",
        "                \"Explore advanced learning opportunities and enrichment activities\"\n",
        "            ]\n",
        "\n",
        "        return interventions[:2]\n",
        "\n",
        "# Initialize AI summary system\n",
        "ai_summary = AdvancedAISummary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293,
          "referenced_widgets": [
            "ec7253f4aa39413985d389f0cc2f4321",
            "6a067b0099ec4e1bb99ebabaefa1afc9",
            "147a31dd55664656933449b9fa806bdc",
            "67e9a60f1d97459ba0eec3678885f085",
            "510743be282144a8bf469db4d1001839",
            "5228135c1e2b446b983ebfea1ccd2a6d",
            "abed0249f5ce4d6da90b971297c4b00c",
            "398b31a9b7e64b0caef1092d93c8e82f",
            "5b24b2ef45f84281af12f57f783e559e",
            "f903c6cc91c2402b9bab2f33f9aef603",
            "db508a7ee21e4bb4afe9d7162e14d3a0",
            "8b0ab80905234375acabd24133437bf0",
            "c8d122919be4469282766ae2153da91e",
            "f9ed8b1cca9f4808b7b079ba4fe7c358",
            "171ec7ae7de84fceb3920c589b592013",
            "57ded1d3c73f44a7b22c5d42d6d73fd9",
            "c67787474de34f33820144c5ccddd0d0",
            "4d0b35ad05f849c3a8fcc9be907009fd",
            "3a1ccfd5be544d8e9e10d990fde41619",
            "ca6f4d4332534699bd21979042a41ad9",
            "7d95579fe2ab43d487e3bafc4bf6f6ea",
            "0b91485d45fa45fc83751000fac248ab",
            "028be5c5795a42cdb15c873d8cee1b92",
            "093af204861341408a6a01da16677461",
            "452ef16bae394188babee8069628fba9",
            "c1dd603cf935424c8fac71fa33c932cb",
            "f046af411e764e00ac9ac57b86cb7967",
            "4dc1a98f843643e983fa7ea7e7b056cc",
            "cb09007a7edf4911844010637bb4c154",
            "2395504f2e784025aae507b4e9cab479",
            "eefed39c57ca4d0ebc74fce8c4f0d69f",
            "1ae3d78797b7497abaa59e237fd1eeb3",
            "a9f7cc815e5f42c08d30e930a5f2a8e6",
            "3387b3051e38482f88810136360c167f",
            "2b3043eddbd34a859bb22b2298ff5c7f",
            "43a6f1b39e144f5bba947246d455479a",
            "56339c3c466047d496bcfe3710b63388",
            "a6f0210885ae42dbab8a5c6a15b22417",
            "12fb33d2b2384eaf9837698772b2aa35",
            "abae2090460b4337a45196a1a70d969f",
            "5a4e633cf97a44dd938c27bce29e4fbe",
            "3ca591f6d8284af89a39900761dd524e",
            "6dcf800871cd4fe5a17549329418db6b",
            "e886399144af40d4b459ab71de28ce2b",
            "47382c16646b47c38a01b545550342b8",
            "3db1e342048647e6ad007e5f0110b466",
            "7b157b162bd64feda184815a9cca7fce",
            "5b1acbc9d25f401ab9bf41ae8d8b40a9",
            "719a78e6bddf4d69bbe9a4916c3845d1",
            "49658d1a60b74c9e94cf54b8d153a6f7",
            "769d906307ca45cf8d4e725683eabeb8",
            "a5295bb9fb25435e88f7e81e61553b90",
            "fbf90211f0944f2bb2d736e1b6a4635c",
            "eafd07076a7e439a93c32b47a6736f62",
            "cacd3236c3dc40619c28e3fbbcbac39e",
            "7003b700a9e14c8d995cbdf4f66b23db",
            "6961f28df8424efbb5a4bfd30d96620c",
            "46e578e8bc9c4b5a943cbea2f6984d04",
            "d42f40e4cada4b3dbe5d5b5326e15457",
            "467d583e393e4ac98abb36f216a384a6",
            "af13c79150cc467d9a6d51b5c2684756",
            "dc688fb3545143c8a22b27cd6b0da610",
            "a7eb0808c00848898799cc475d222e17",
            "b1cd7f56a1324157940c5ecafb5fce22",
            "bd6cb9e624374be99e43437d55754a31",
            "ba6ee7562a4547b6b85047130925e789",
            "59a7f28dd2b24a96896c422e99d5c3b1",
            "491236cd25be4a689266885dc131cd38",
            "c3b6a6d4e8394553ab3fd0d0684ae3b5",
            "bc3a45a424bb4d81a1d843430186bfa8",
            "1992668bc87a411ba5498c924e562bd7",
            "13b0b2075de94fc590f361a00883acdf",
            "4273ff2bc1f240c99de9f3349b25930c",
            "0ccddea1d8804f98ab68ed35e3c6af87",
            "e39e5ee3893d42d5898286d3c33082bd",
            "54bfc2a31d854c0d952723719fdab402",
            "9155695c9ae84bc18c2a1885c08ba9e0"
          ]
        },
        "id": "FKob6Lp0X9O1",
        "outputId": "fcda32c8-2feb-4f5b-c401-85dddd725dd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🤖 Initializing AI summary system...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/1.40k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ec7253f4aa39413985d389f0cc2f4321"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/308M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8b0ab80905234375acabd24133437bf0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "028be5c5795a42cdb15c873d8cee1b92"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/2.54k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3387b3051e38482f88810136360c167f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "47382c16646b47c38a01b545550342b8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/2.42M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7003b700a9e14c8d995cbdf4f66b23db"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/2.20k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "59a7f28dd2b24a96896c422e99d5c3b1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ AI summary system initialized!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 📊 Ultra-Advanced Real-Time Anomaly Detection System\n",
        "# ============================================================================\n",
        "\n",
        "class AdvancedAnomalyDetector:\n",
        "    \"\"\"Real-time anomaly detection with multiple algorithms\"\"\"\n",
        "\n",
        "    def __init__(self, window_size=100, alpha=0.3):\n",
        "        self.window_size = window_size\n",
        "        self.alpha = alpha\n",
        "        self.scores_history = deque(maxlen=window_size)\n",
        "        self.ema = None\n",
        "        self.ema_variance = None\n",
        "        self.anomaly_threshold = 2.0\n",
        "        self.anomaly_count = 0\n",
        "        self.total_predictions = 0\n",
        "\n",
        "    def update(self, score: float) -> dict:\n",
        "        \"\"\"Update anomaly detection with new score\"\"\"\n",
        "        self.total_predictions += 1\n",
        "        self.scores_history.append(score)\n",
        "\n",
        "        if self.ema is None:\n",
        "            self.ema = score\n",
        "            self.ema_variance = 0\n",
        "            return {\n",
        "                'is_anomaly': False,\n",
        "                'anomaly_score': 0.0,\n",
        "                'confidence': 0.0,\n",
        "                'ema': self.ema,\n",
        "                'threshold': self.anomaly_threshold\n",
        "            }\n",
        "\n",
        "        # Update EMA\n",
        "        self.ema = self.alpha * score + (1 - self.alpha) * self.ema\n",
        "\n",
        "        # Update EMA variance\n",
        "        squared_diff = (score - self.ema) ** 2\n",
        "        if self.ema_variance is None:\n",
        "            self.ema_variance = squared_diff\n",
        "        else:\n",
        "            self.ema_variance = self.alpha * squared_diff + (1 - self.alpha) * self.ema_variance\n",
        "\n",
        "        # Calculate standard deviation\n",
        "        std_dev = np.sqrt(self.ema_variance) if self.ema_variance > 0 else 1.0\n",
        "\n",
        "        # Calculate anomaly score\n",
        "        anomaly_score = abs(score - self.ema) / std_dev if std_dev > 0 else 0\n",
        "\n",
        "        # Determine if anomaly\n",
        "        is_anomaly = anomaly_score > self.anomaly_threshold\n",
        "\n",
        "        if is_anomaly:\n",
        "            self.anomaly_count += 1\n",
        "\n",
        "        confidence = min(len(self.scores_history) / self.window_size, 1.0)\n",
        "\n",
        "        return {\n",
        "            'is_anomaly': is_anomaly,\n",
        "            'anomaly_score': float(anomaly_score),\n",
        "            'confidence': float(confidence),\n",
        "            'ema': float(self.ema),\n",
        "            'threshold': self.anomaly_threshold,\n",
        "            'anomaly_rate': self.anomaly_count / self.total_predictions\n",
        "        }\n",
        "\n",
        "    def get_statistics(self) -> dict:\n",
        "        \"\"\"Get comprehensive anomaly statistics\"\"\"\n",
        "        if not self.scores_history:\n",
        "            return {}\n",
        "\n",
        "        scores_array = np.array(self.scores_history)\n",
        "        return {\n",
        "            'total_predictions': self.total_predictions,\n",
        "            'anomaly_count': self.anomaly_count,\n",
        "            'anomaly_rate': self.anomaly_count / max(self.total_predictions, 1),\n",
        "            'current_ema': float(self.ema) if self.ema else 0,\n",
        "            'score_mean': float(np.mean(scores_array)),\n",
        "            'score_std': float(np.std(scores_array)),\n",
        "            'score_min': float(np.min(scores_array)),\n",
        "            'score_max': float(np.max(scores_array))\n",
        "        }\n",
        "\n",
        "# Initialize anomaly detector\n",
        "anomaly_detector = AdvancedAnomalyDetector()\n"
      ],
      "metadata": {
        "id": "CmARlNcBYCpz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🎯 Advanced Pydantic Models for Type Safety & Validation\n",
        "# ============================================================================\n",
        "\n",
        "class StudentFeatures(BaseModel):\n",
        "    \"\"\"Advanced student feature model with comprehensive validation\"\"\"\n",
        "    studytime: float = Field(..., ge=0, le=4, description=\"Study time per week (0-4 hours)\")\n",
        "    G1: float = Field(..., ge=0, le=20, description=\"First period grade (0-20)\")\n",
        "    G2: float = Field(..., ge=0, le=20, description=\"Second period grade (0-20)\")\n",
        "    absences: float = Field(..., ge=0, description=\"Number of absences\")\n",
        "    effort_score: float = Field(..., ge=0, le=1, description=\"Effort score (0-1)\")\n",
        "    sentiment: float = Field(..., ge=0, le=1, description=\"Emotional sentiment (0-1)\")\n",
        "    participation: float = Field(..., ge=0, le=1, description=\"Participation index (0-1)\")\n",
        "\n",
        "    class Config:\n",
        "        schema_extra = {\n",
        "            \"example\": {\n",
        "                \"studytime\": 2.5,\n",
        "                \"G1\": 12.0,\n",
        "                \"G2\": 14.5,\n",
        "                \"absences\": 2.0,\n",
        "                \"effort_score\": 0.8,\n",
        "                \"sentiment\": 0.7,\n",
        "                \"participation\": 0.9\n",
        "            }\n",
        "        }\n",
        "\n",
        "class PredictionResponse(BaseModel):\n",
        "    \"\"\"Comprehensive prediction response\"\"\"\n",
        "    predicted_score: float = Field(..., description=\"Predicted final score\")\n",
        "    confidence: float = Field(..., description=\"Prediction confidence\")\n",
        "    risk_level: str = Field(..., description=\"Academic risk level\")\n",
        "    anomaly_detected: bool = Field(..., description=\"Anomaly detection flag\")\n",
        "    request_id: str = Field(..., description=\"Unique request identifier\")\n",
        "    timestamp: str = Field(..., description=\"Prediction timestamp\")\n",
        "    model_version: str = Field(..., description=\"Model version used\")\n",
        "\n",
        "class ExplanationResponse(BaseModel):\n",
        "    \"\"\"SHAP explanation response\"\"\"\n",
        "    shap_values: Dict[str, float] = Field(..., description=\"SHAP feature values\")\n",
        "    feature_importance: Dict[str, float] = Field(..., description=\"Feature importance scores\")\n",
        "    top_factors: List[str] = Field(..., description=\"Top influencing factors\")\n",
        "    request_id: str = Field(..., description=\"Unique request identifier\")\n",
        "\n",
        "class SummaryResponse(BaseModel):\n",
        "    \"\"\"AI-generated summary response\"\"\"\n",
        "    summary: str = Field(..., description=\"Performance summary\")\n",
        "    interventions: List[str] = Field(..., description=\"Recommended interventions\")\n",
        "    confidence_score: float = Field(..., description=\"Summary confidence\")\n",
        "    request_id: str = Field(..., description=\"Unique request identifier\")\n",
        "\n",
        "class HealthResponse(BaseModel):\n",
        "    \"\"\"System health response\"\"\"\n",
        "    status: str = Field(..., description=\"System status\")\n",
        "    uptime: str = Field(..., description=\"System uptime\")\n",
        "    memory_usage: float = Field(..., description=\"Memory usage percentage\")\n",
        "    cpu_usage: float = Field(..., description=\"CPU usage percentage\")\n",
        "    total_predictions: int = Field(..., description=\"Total predictions made\")\n",
        "    model_accuracy: float = Field(..., description=\"Model accuracy\")\n",
        "\n",
        "print(\"✅ Advanced Pydantic models defined!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_HulPPjCYFij",
        "outputId": "b73217f8-d00e-402e-b614-2b4792ceb041"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Advanced Pydantic models defined!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🚀 Ultra-Modern FastAPI Backend with Advanced Features\n",
        "# ============================================================================\n",
        "\n",
        "# Global variables for monitoring\n",
        "prediction_counter = Counter('clis_predictions_total', 'Total predictions made')\n",
        "prediction_histogram = Histogram('clis_prediction_duration_seconds', 'Prediction duration')\n",
        "error_counter = Counter('clis_errors_total', 'Total errors', ['error_type'])\n",
        "\n",
        "# Request logging\n",
        "request_logs = deque(maxlen=1000)\n",
        "start_time = datetime.datetime.now()\n",
        "\n",
        "# Create FastAPI app with advanced configuration\n",
        "app = FastAPI(\n",
        "    title=\"CLIS - Cognitive Learning Intelligence System\",\n",
        "    description=\"🚀 Ultra-Modern AI-Powered Education Analytics Platform\",\n",
        "    version=\"3.0.0\",\n",
        "    docs_url=\"/docs\",\n",
        "    redoc_url=\"/redoc\",\n",
        "    openapi_tags=[\n",
        "        {\"name\": \"predictions\", \"description\": \"AI prediction endpoints\"},\n",
        "        {\"name\": \"explanations\", \"description\": \"Explainable AI endpoints\"},\n",
        "        {\"name\": \"summaries\", \"description\": \"AI summary endpoints\"},\n",
        "        {\"name\": \"monitoring\", \"description\": \"System monitoring endpoints\"}\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Advanced CORS configuration\n",
        "app.add_middleware(\n",
        "    CORSMiddleware,\n",
        "    allow_origins=[\"*\"],\n",
        "    allow_credentials=True,\n",
        "    allow_methods=[\"*\"],\n",
        "    allow_headers=[\"*\"],\n",
        ")\n",
        "\n",
        "# Utility functions\n",
        "def log_request(request_id: str, endpoint: str, data: dict, response: dict):\n",
        "    \"\"\"Log request details\"\"\"\n",
        "    log_entry = {\n",
        "        'request_id': request_id,\n",
        "        'endpoint': endpoint,\n",
        "        'timestamp': datetime.datetime.now().isoformat(),\n",
        "        'input_data': data,\n",
        "        'response': response\n",
        "    }\n",
        "    request_logs.append(log_entry)\n",
        "\n",
        "def get_system_stats():\n",
        "    \"\"\"Get system performance statistics\"\"\"\n",
        "    return {\n",
        "        'memory_usage': psutil.virtual_memory().percent,\n",
        "        'cpu_usage': psutil.cpu_percent(),\n",
        "        'uptime': str(datetime.datetime.now() - start_time)\n",
        "    }\n",
        "\n",
        "def prepare_student_features(features: StudentFeatures):\n",
        "    \"\"\"Prepare features for model prediction\"\"\"\n",
        "    # Create feature vector matching training format\n",
        "    feature_vector = [\n",
        "        features.studytime,\n",
        "        features.G1,\n",
        "        features.G2,\n",
        "        features.absences,\n",
        "        features.effort_score,\n",
        "        features.sentiment,\n",
        "        features.participation\n",
        "    ]\n",
        "\n",
        "    return np.array(feature_vector).reshape(1, -1)\n",
        "\n",
        "# ============================================================================\n",
        "# 🎯 API Endpoints\n",
        "# ============================================================================\n",
        "\n",
        "@app.get(\"/\", response_class=HTMLResponse)\n",
        "async def root():\n",
        "    \"\"\"Welcome page with API documentation\"\"\"\n",
        "    html_content = \"\"\"\n",
        "    <!DOCTYPE html>\n",
        "    <html>\n",
        "    <head>\n",
        "        <title>CLIS - Cognitive Learning Intelligence System</title>\n",
        "        <style>\n",
        "            body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n",
        "            .container { max-width: 800px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; }\n",
        "            h1 { color: #fff; text-align: center; }\n",
        "            .endpoint { background: rgba(255,255,255,0.2); padding: 15px; margin: 10px 0; border-radius: 8px; }\n",
        "            .method { color: #4CAF50; font-weight: bold; }\n",
        "        </style>\n",
        "    </head>\n",
        "    <body>\n",
        "        <div class=\"container\">\n",
        "            <h1>🚀 CLIS Backend API</h1>\n",
        "            <p>Ultra-Modern AI-Powered Education Analytics Platform</p>\n",
        "\n",
        "            <div class=\"endpoint\">\n",
        "                <span class=\"method\">POST</span> /predict - Get AI predictions\n",
        "            </div>\n",
        "            <div class=\"endpoint\">\n",
        "                <span class=\"method\">POST</span> /explain - Get SHAP explanations\n",
        "            </div>\n",
        "            <div class=\"endpoint\">\n",
        "                <span class=\"method\">POST</span> /summary - Get AI summaries\n",
        "            </div>\n",
        "            <div class=\"endpoint\">\n",
        "                <span class=\"method\">GET</span> /health - System health check\n",
        "            </div>\n",
        "            <div class=\"endpoint\">\n",
        "                <span class=\"method\">GET</span> /docs - Interactive API documentation\n",
        "            </div>\n",
        "        </div>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    return HTMLResponse(content=html_content)\n",
        "\n",
        "@app.get(\"/health\", response_model=HealthResponse, tags=[\"monitoring\"])\n",
        "async def health_check():\n",
        "    \"\"\"Advanced health check endpoint\"\"\"\n",
        "    stats = get_system_stats()\n",
        "\n",
        "    return HealthResponse(\n",
        "        status=\"healthy\",\n",
        "        uptime=stats['uptime'],\n",
        "        memory_usage=stats['memory_usage'],\n",
        "        cpu_usage=stats['cpu_usage'],\n",
        "        total_predictions=anomaly_detector.total_predictions,\n",
        "        model_accuracy=ml_pipeline.model_metrics.get('ensemble', {}).get('r2', 0.0)\n",
        "    )\n",
        "\n",
        "@app.post(\"/predict\", response_model=PredictionResponse, tags=[\"predictions\"])\n",
        "async def predict_score(features: StudentFeatures):\n",
        "    \"\"\"🎯 Advanced prediction endpoint with anomaly detection\"\"\"\n",
        "    request_id = str(uuid.uuid4())\n",
        "\n",
        "    try:\n",
        "        with prediction_histogram.time():\n",
        "            # Prepare features\n",
        "            feature_array = prepare_student_features(features)\n",
        "\n",
        "            # Make prediction using ensemble\n",
        "            prediction = ml_pipeline.predict_ensemble(feature_array)[0]\n",
        "            prediction = max(0, min(20, prediction))  # Clip to valid range\n",
        "\n",
        "            # Update anomaly detection\n",
        "            anomaly_result = anomaly_detector.update(prediction)\n",
        "\n",
        "            # Determine risk level\n",
        "            if prediction >= 14:\n",
        "                risk_level = \"low\"\n",
        "            elif prediction >= 10:\n",
        "                risk_level = \"medium\"\n",
        "            else:\n",
        "                risk_level = \"high\"\n",
        "\n",
        "            # Calculate confidence\n",
        "            confidence = min(0.95, 0.7 + (prediction / 20) * 0.25)\n",
        "\n",
        "            response = PredictionResponse(\n",
        "                predicted_score=round(prediction, 2),\n",
        "                confidence=round(confidence, 3),\n",
        "                risk_level=risk_level,\n",
        "                anomaly_detected=anomaly_result['is_anomaly'],\n",
        "                request_id=request_id,\n",
        "                timestamp=datetime.datetime.now().isoformat(),\n",
        "                model_version=\"Portuguese-v3.0\"\n",
        "            )\n",
        "\n",
        "            # Log request\n",
        "            log_request(request_id, \"/predict\", features.dict(), response.dict())\n",
        "\n",
        "            # Update metrics\n",
        "            prediction_counter.inc()\n",
        "\n",
        "            return response\n",
        "\n",
        "    except Exception as e:\n",
        "        error_counter.labels(error_type=\"prediction\").inc()\n",
        "        logger.error(f\"Prediction error: {e}\")\n",
        "        raise HTTPException(status_code=500, detail=f\"Prediction failed: {str(e)}\")\n",
        "\n",
        "@app.post(\"/explain\", response_model=ExplanationResponse, tags=[\"explanations\"])\n",
        "async def explain_prediction(features: StudentFeatures):\n",
        "    \"\"\"🔍 Advanced explanation endpoint with SHAP values\"\"\"\n",
        "    request_id = str(uuid.uuid4())\n",
        "\n",
        "    try:\n",
        "        # Prepare features\n",
        "        feature_array = prepare_student_features(features)\n",
        "        feature_list = feature_array[0].tolist()\n",
        "\n",
        "        # Get SHAP explanation\n",
        "        shap_values, importance, top_factors = explainer.get_feature_explanation(feature_list)\n",
        "\n",
        "        response = ExplanationResponse(\n",
        "            shap_values=shap_values,\n",
        "            feature_importance=importance,\n",
        "            top_factors=top_factors,\n",
        "            request_id=request_id\n",
        "        )\n",
        "\n",
        "        # Log request\n",
        "        log_request(request_id, \"/explain\", features.dict(), response.dict())\n",
        "\n",
        "        return response\n",
        "\n",
        "    except Exception as e:\n",
        "        error_counter.labels(error_type=\"explanation\").inc()\n",
        "        logger.error(f\"Explanation error: {e}\")\n",
        "        raise HTTPException(status_code=500, detail=f\"Explanation failed: {str(e)}\")\n",
        "\n",
        "@app.post(\"/summary\", response_model=SummaryResponse, tags=[\"summaries\"])\n",
        "async def generate_summary(features: StudentFeatures):\n",
        "    \"\"\"🤖 Advanced AI summary endpoint with LangChain\"\"\"\n",
        "    request_id = str(uuid.uuid4())\n",
        "\n",
        "    try:\n",
        "        # Get prediction first\n",
        "        feature_array = prepare_student_features(features)\n",
        "        prediction = ml_pipeline.predict_ensemble(feature_array)[0]\n",
        "\n",
        "        # Generate AI summary\n",
        "        summary, interventions, confidence = ai_summary.generate_summary(\n",
        "            features.dict(), prediction\n",
        "        )\n",
        "\n",
        "        response = SummaryResponse(\n",
        "            summary=summary,\n",
        "            interventions=interventions,\n",
        "            confidence_score=confidence,\n",
        "            request_id=request_id\n",
        "        )\n",
        "\n",
        "        # Log request\n",
        "        log_request(request_id, \"/summary\", features.dict(), response.dict())\n",
        "\n",
        "        return response\n",
        "\n",
        "    except Exception as e:\n",
        "        error_counter.labels(error_type=\"summary\").inc()\n",
        "        logger.error(f\"Summary error: {e}\")\n",
        "        raise HTTPException(status_code=500, detail=f\"Summary generation failed: {str(e)}\")\n",
        "\n",
        "@app.get(\"/metrics\", tags=[\"monitoring\"])\n",
        "async def get_metrics():\n",
        "    \"\"\"📊 Prometheus metrics endpoint\"\"\"\n",
        "    return generate_latest()\n",
        "\n",
        "@app.get(\"/analytics\", tags=[\"monitoring\"])\n",
        "async def get_analytics():\n",
        "    \"\"\"📈 Advanced analytics dashboard\"\"\"\n",
        "    return {\n",
        "        'system_stats': get_system_stats(),\n",
        "        'anomaly_stats': anomaly_detector.get_statistics(),\n",
        "        'model_metrics': ml_pipeline.model_metrics,\n",
        "        'recent_requests': len(request_logs),\n",
        "        'dataset_info': {\n",
        "            'total_students': len(df),\n",
        "            'avg_final_grade': float(df['G3'].mean()),\n",
        "            'grade_std': float(df['G3'].std())\n",
        "        }\n",
        "    }\n",
        "\n",
        "@app.post(\"/log_prediction\", tags=[\"monitoring\"])\n",
        "async def log_prediction_endpoint(features: StudentFeatures, background_tasks: BackgroundTasks):\n",
        "    \"\"\"📝 Log prediction to CSV file\"\"\"\n",
        "    request_id = str(uuid.uuid4())\n",
        "\n",
        "    try:\n",
        "        # Make prediction\n",
        "        feature_array = prepare_student_features(features)\n",
        "        prediction = ml_pipeline.predict_ensemble(feature_array)[0]\n",
        "\n",
        "        # Prepare log data\n",
        "        log_data = {\n",
        "            'timestamp': datetime.datetime.now().isoformat(),\n",
        "            'request_id': request_id,\n",
        "            'predicted_score': prediction,\n",
        "            **features.dict()\n",
        "        }\n",
        "\n",
        "        # Background task to save to CSV\n",
        "        background_tasks.add_task(save_to_csv, log_data)\n",
        "\n",
        "        return {\"status\": \"logged\", \"request_id\": request_id, \"predicted_score\": prediction}\n",
        "\n",
        "    except Exception as e:\n",
        "        logger.error(f\"Logging error: {e}\")\n",
        "        raise HTTPException(status_code=500, detail=f\"Logging failed: {str(e)}\")\n",
        "\n",
        "def save_to_csv(log_data: dict):\n",
        "    \"\"\"Background task to save prediction to CSV\"\"\"\n",
        "    try:\n",
        "        df_log = pd.DataFrame([log_data])\n",
        "        df_log.to_csv('predictions_log.csv', mode='a', header=False, index=False)\n",
        "    except Exception as e:\n",
        "        logger.error(f\"CSV save error: {e}\")\n",
        "\n",
        "print(\"✅ Ultra-modern FastAPI backend initialized successfully!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2adBH3YuYH2y",
        "outputId": "e7599b34-fbe2-4d68-b9ff-60f4f6edcc2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Ultra-modern FastAPI backend initialized successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🔐 Configure Ngrok Authentication\n",
        "# ============================================================================\n",
        "\n",
        "from pyngrok import ngrok\n",
        "\n",
        "# Set your ngrok authtoken\n",
        "ngrok.set_auth_token(\"2y8Ak5RQ24Kte52TNceryyFey1g_hJnvStRtXnsd32xASXwY\")\n",
        "\n",
        "print(\"✅ Ngrok authtoken configured successfully!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9dWkT9tTdndB",
        "outputId": "02b28444-3ad8-4445-daf5-2485f0e55876"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Ngrok authtoken configured successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================================================\n",
        "# 🌐 Ultra-Advanced Deployment with Ngrok & Monitoring\n",
        "# ============================================================================\n",
        "\n",
        "class AdvancedDeployment:\n",
        "    \"\"\"Advanced deployment manager with comprehensive monitoring\"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        self.ngrok_tunnel = None\n",
        "        self.public_url = None\n",
        "        self.server_process = None\n",
        "\n",
        "    def setup_ngrok(self, auth_token=None):\n",
        "        \"\"\"Setup Ngrok tunnel with authentication\"\"\"\n",
        "        try:\n",
        "            if auth_token:\n",
        "                ngrok.set_auth_token(auth_token)\n",
        "\n",
        "            # Create tunnel\n",
        "            self.ngrok_tunnel = ngrok.connect(8000)\n",
        "            self.public_url = self.ngrok_tunnel.public_url\n",
        "\n",
        "            print(f\"🌐 Ngrok tunnel established!\")\n",
        "            print(f\"🔗 Public URL: {self.public_url}\")\n",
        "            print(f\"📊 API Documentation: {self.public_url}/docs\")\n",
        "            print(f\"📈 Analytics: {self.public_url}/analytics\")\n",
        "            print(f\"🏥 Health Check: {self.public_url}/health\")\n",
        "\n",
        "            return self.public_url\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Ngrok setup failed: {e}\")\n",
        "            print(\"🔗 Server running locally: http://localhost:8000\")\n",
        "            return \"http://localhost:8000\"\n",
        "\n",
        "    def start_server(self):\n",
        "        \"\"\"Start the FastAPI server\"\"\"\n",
        "        try:\n",
        "            print(\"🚀 Starting ultra-modern CLIS backend server...\")\n",
        "\n",
        "            # Configure uvicorn\n",
        "            config = uvicorn.Config(\n",
        "                app=app,\n",
        "                host=\"0.0.0.0\",\n",
        "                port=8000,\n",
        "                log_level=\"info\",\n",
        "                reload=False\n",
        "            )\n",
        "\n",
        "            server = uvicorn.Server(config)\n",
        "\n",
        "            # Start server in background\n",
        "            server_thread = threading.Thread(target=server.run)\n",
        "            server_thread.daemon = True\n",
        "            server_thread.start()\n",
        "\n",
        "            # Wait for server to start\n",
        "            time.sleep(3)\n",
        "\n",
        "            print(\"✅ Server started successfully!\")\n",
        "            return server_thread\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Server startup failed: {e}\")\n",
        "            return None\n",
        "\n",
        "    def deploy(self, ngrok_token=None):\n",
        "        \"\"\"Full deployment process\"\"\"\n",
        "        print(\"🚀 Initiating ultra-modern deployment...\")\n",
        "\n",
        "        # Start server\n",
        "        server_thread = self.start_server()\n",
        "        if not server_thread:\n",
        "            return False\n",
        "\n",
        "        # Setup Ngrok\n",
        "        public_url = self.setup_ngrok(ngrok_token)\n",
        "\n",
        "        # Display deployment summary\n",
        "        self.display_deployment_summary()\n",
        "\n",
        "        return True\n",
        "\n",
        "    def display_deployment_summary(self):\n",
        "        \"\"\"Display comprehensive deployment summary\"\"\"\n",
        "        print(\"\\n\" + \"=\"*80)\n",
        "        print(\"🎉 CLIS BACKEND DEPLOYMENT SUCCESSFUL!\")\n",
        "        print(\"=\"*80)\n",
        "        print(f\"🌐 Public URL: {self.public_url or 'http://localhost:8000'}\")\n",
        "        print(f\"📚 API Documentation: {(self.public_url or 'http://localhost:8000')}/docs\")\n",
        "        print(f\"🏥 Health Check: {(self.public_url or 'http://localhost:8000')}/health\")\n",
        "        print(f\"📊 Analytics: {(self.public_url or 'http://localhost:8000')}/analytics\")\n",
        "        print(f\"📈 Metrics: {(self.public_url or 'http://localhost:8000')}/metrics\")\n",
        "\n",
        "        print(\"\\n🎯 Available Endpoints:\")\n",
        "        print(\"  POST /predict     - Get AI predictions with anomaly detection\")\n",
        "        print(\"  POST /explain     - Get SHAP explanations\")\n",
        "        print(\"  POST /summary     - Get AI-generated summaries with LangChain\")\n",
        "        print(\"  POST /log_prediction - Log predictions to CSV\")\n",
        "        print(\"  GET  /health      - System health check\")\n",
        "        print(\"  GET  /analytics   - Advanced analytics dashboard\")\n",
        "        print(\"  GET  /metrics     - Prometheus metrics\")\n",
        "\n",
        "        print(\"\\n🔧 Ultra-Modern Features:\")\n",
        "        print(\"  ✅ Portuguese Student Dataset Integration\")\n",
        "        print(\"  ✅ Advanced Ensemble ML Models\")\n",
        "        print(\"  ✅ Real-time Anomaly Detection with EMA\")\n",
        "        print(\"  ✅ SHAP Explainable AI\")\n",
        "        print(\"  ✅ LangChain + Flan-T5 AI Summaries\")\n",
        "        print(\"  ✅ Prometheus Monitoring\")\n",
        "        print(\"  ✅ Advanced Request Logging\")\n",
        "        print(\"  ✅ Production-grade Error Handling\")\n",
        "        print(\"  ✅ Comprehensive Type Safety\")\n",
        "        print(\"  ✅ Interactive API Documentation\")\n",
        "        print(\"=\"*80)\n",
        "\n",
        "# Initialize deployment manager\n",
        "deployment = AdvancedDeployment()\n",
        "\n",
        "# Deploy the system\n",
        "# In your deployment cell, update this line:\n",
        "deployment.deploy(ngrok_token=\"2y8Ak5RQ24Kte52TNceryyFey1g_hJnvStRtXnsd32xASXwY\")\n",
        "\n",
        "print(\"\\n🎊 CLIS Backend is now live and ready for frontend integration!\")\n",
        "print(\"🔗 Connect your React dashboard to the public URL above\")\n",
        "print(\"📱 Test the API using the interactive documentation\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HyL4Fs-NYMHo",
        "outputId": "3962a3a0-b622-4a3c-e5e3-61f7f152d412"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 Initiating ultra-modern deployment...\n",
            "🚀 Starting ultra-modern CLIS backend server...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:     Started server process [758]\n",
            "INFO:     Waiting for application startup.\n",
            "INFO:     Application startup complete.\n",
            "ERROR:    [Errno 98] error while attempting to bind on address ('0.0.0.0', 8000): address already in use\n",
            "INFO:     Waiting for application shutdown.\n",
            "INFO:     Application shutdown complete.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Server started successfully!\n",
            "🌐 Ngrok tunnel established!\n",
            "🔗 Public URL: https://a274-34-16-211-138.ngrok-free.app\n",
            "📊 API Documentation: https://a274-34-16-211-138.ngrok-free.app/docs\n",
            "📈 Analytics: https://a274-34-16-211-138.ngrok-free.app/analytics\n",
            "🏥 Health Check: https://a274-34-16-211-138.ngrok-free.app/health\n",
            "\n",
            "================================================================================\n",
            "🎉 CLIS BACKEND DEPLOYMENT SUCCESSFUL!\n",
            "================================================================================\n",
            "🌐 Public URL: https://a274-34-16-211-138.ngrok-free.app\n",
            "📚 API Documentation: https://a274-34-16-211-138.ngrok-free.app/docs\n",
            "🏥 Health Check: https://a274-34-16-211-138.ngrok-free.app/health\n",
            "📊 Analytics: https://a274-34-16-211-138.ngrok-free.app/analytics\n",
            "📈 Metrics: https://a274-34-16-211-138.ngrok-free.app/metrics\n",
            "\n",
            "🎯 Available Endpoints:\n",
            "  POST /predict     - Get AI predictions with anomaly detection\n",
            "  POST /explain     - Get SHAP explanations\n",
            "  POST /summary     - Get AI-generated summaries with LangChain\n",
            "  POST /log_prediction - Log predictions to CSV\n",
            "  GET  /health      - System health check\n",
            "  GET  /analytics   - Advanced analytics dashboard\n",
            "  GET  /metrics     - Prometheus metrics\n",
            "\n",
            "🔧 Ultra-Modern Features:\n",
            "  ✅ Portuguese Student Dataset Integration\n",
            "  ✅ Advanced Ensemble ML Models\n",
            "  ✅ Real-time Anomaly Detection with EMA\n",
            "  ✅ SHAP Explainable AI\n",
            "  ✅ LangChain + Flan-T5 AI Summaries\n",
            "  ✅ Prometheus Monitoring\n",
            "  ✅ Advanced Request Logging\n",
            "  ✅ Production-grade Error Handling\n",
            "  ✅ Comprehensive Type Safety\n",
            "  ✅ Interactive API Documentation\n",
            "================================================================================\n",
            "\n",
            "🎊 CLIS Backend is now live and ready for frontend integration!\n",
            "🔗 Connect your React dashboard to the public URL above\n",
            "📱 Test the API using the interactive documentation\n"
          ]
        }
      ]
    }
  ]
}